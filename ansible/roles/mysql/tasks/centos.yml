# - name: Add Mysql repository
#   yum: name=http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
#   tags: [mysql]

- name: Add Percona Server Mysql repository
  yum: name=http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm  
  tags: [mysql]


# - name: Install Mysql RPM dependencies
#   become: true
#   yum: name={{ item }} state=present
#   with_items:
#     - net-tools
#     - vim
#     - telnet
#     - lsof
#     - python-pip
#     - python-virtualenv
#     - mysql-community-common
#     - mysql-community-libs
#     - mysql-community-client
#     - mysql-community-server 
#     - mysql-community-devel
#     - perl-DBD-MySQL
#     - gcc
#   tags: [mysql]

- name: Install Percona Mysql RPM dependencies
  become: true
  yum: name={{ item }} state=present
  with_items:
    - net-tools
    - vim
    - telnet
    - lsof
    - python-pip
    - python-virtualenv
    - Percona-Server-server-57
    - Percona-Server-client-57
    - Percona-Server-shared-57
    - Percona-Server-devel-57
    - perl-DBD-MySQL
    - gcc
    - sshpass
  tags: [mysql]

- name:  pip  install pip
  become: true
  pip:  
    name: pip
    state: latest
  ignore_errors: yes
  tags: [mysql]

- name:  pip  install MySQL-python
  become: true
  pip:
    name:  MySQL-python
  ignore_errors: yes
  tags: [mysql]

- name: mysql service is restarted [1]
  service:
    name: mysqld
    state: restarted
  tags: [mysql]


- name: Get percona server password
  shell: cat /var/log/mysqld.log | grep "temporary password" | awk '{print $11}'
  register: mysql_temp_pass
  tags: [mysql]


- name: Copy .my.cnf file
  template: 
    src: temp_my.cnf.j2 
    dest: /root/.my.cnf
    owner: root 
    group: root 
    mode: 0644
  tags: [mysql]

- name: whoami 
  become: false
  shell: whoami
  register: linux_user
  tags: [mysql]

- name: id -g -n
  become: false
  shell: id -g -n
  register: linux_group
  tags: [mysql]

# https://www.rennetti.com/howto/139/mysql-5-7-on-ansible  
- name: Set new password from temporary password
  shell: 'mysql -e "SET PASSWORD = PASSWORD(''{{ mysql_root_pass }}'');" --connect-expired-password -uroot -p"{{ mysql_temp_pass.stdout }}"'
  ignore_errors: True
  tags: [mysql]

- name: "MySQL: template: .my.cnf file to /home/{{ linux_user.stdout }}"
  become: false
  template:
    src: temp_my.cnf.j2
    dest: "~/.my.cnf"
    owner: "{{ linux_user.stdout }}"
    group: "{{ linux_group.stdout }}"
    mode: 0600
  tags: [mysql]


- name: Set root password
  become: false
  mysql_user: 
      name: root
      password: "{{ mysql_root_pass }}"
      priv: '*.*:ALL,GRANT'      
      state: present
      host: "{{ item }}"
      sql_log_bin: no
  with_items:
     - "{{ ansible_hostname }}"
     - 127.0.0.1
     - ::1
     - localhost
     - '%'
  tags: [mysql]

- name: register hostname
  shell: hostname
  register: hostname
  tags: [mysql]  

- name: Semi-synchronous - Create replication user
  mysql_user: 
     name: "{{ mysql_rep_user }}"
     password: "{{ mysql_rep_pass }}"
     priv: "{{ mysql_rep_priv }}"
     host: '%'
     state: present
  when: hostname.stdout.find('mysql-01') == 0
  tags: [mysql]


- name: Semi-synchronous - Flush
  shell: mysql --defaults-file=/root/.my.cnf -e "FLUSH PRIVILEGES";
  shell: mysql --defaults-file=/root/.my.cnf -e "FLUSH TABLES WITH READ LOCK";
  when: hostname.stdout.find('mysql-01') == 0
  tags: [mysql]

- name: Semi-synchronous - Dump all database
  mysql_db: state=dump name=all target=/root/all_db_dump.sql
  when: hostname.stdout.find('mysql-01') == 0
  tags: [mysql]


- name: Semi-synchronous - Send all_db_dump.sql
  shell: " sshpass -p '{{ mysql_slave_root_pass }}' scp -o StrictHostKeyChecking=no /root/all_db_dump.sql root@{{ item }}:~/  "
  with_items: "{{ mysql_slaves }}"
  when: hostname.stdout.find('mysql-01') == 0
  tags: [mysql]

- name: Semi-synchronous - Stop slave if running
  mysql_replication: 
     mode: stopslave
  # when: hostname.stdout.find('db-slave') == 0
  when: hostname.stdout.find('mysql-01') != 0
  tags: [mysql]

- name: Semi-synchronous - Import all_db_dump.sql
  shell: mysql --defaults-file=/root/.my.cnf < /root/all_db_dump.sql
  # when: hostname.stdout.find('db-slave') == 0
  when: hostname.stdout.find('mysql-01') != 0
  tags: [mysql]

- name: Semi-synchronous - Get the master status
  mysql_replication: 
    mode: getmaster
  delegate_to: "{{ mysql_master }}"
  register: binlog
  # when: hostname.stdout.find('db-slave') == 0
  when: hostname.stdout.find('mysql-01') != 0
  tags: [mysql]

- name: Semi-synchronous - Change the master
  mysql_replication: 
    mode: changemaster
    master_host: "{{ mysql_master }}"
    master_user: "{{ mysql_rep_user }}"
    master_password: "{{ mysql_rep_pass }}"
    master_log_file: "{{ binlog.File }}"
    master_log_pos: "{{ binlog.Position }}"
  # when: hostname.stdout.find('db-slave') == 0
  when: hostname.stdout.find('mysql-01') != 0
  tags: [mysql]

